model Community

class Community 
    attributes
        childToYoung : Integer
        youngToAdult : Integer
        adultToElder : Integer
end

class Person 
    attributes
        birthYear : Integer
        deathYear : Integer
        age : Integer
        isDead : Boolean
        phase : phases
        maritalStatus : status

    operations
        die()
        age()
        consent() : Boolean
        toYoung()
        toAdult()
        toElder()

        
end

class Marriage
    attributes
        startYear : Integer
        endYear : Integer

    operations
        divorce (hus : Person, wif : Person)
        marry (hus : Person, wif : Person)
        widowed (hus : Person, wif : Person)
end

class Clock 
    attributes
        NOW : Integer

    operations
        tick()
end

enum phases {child, young, adult, elder}

enum status {married, single, divorced, widower}

composition pertenece between
    Person [0..*] role person 
    Community [1] role community
end

aggregation cuenta between
    Clock [1] role clock
    Community [0..*] role community
end

association maridoDe between
    Person [1] role husband
    Marriage [0..*] role wife
end

association mujerDe between 
    Person [1] role wife
    Marriage [0..*] role husband
end

constraints 
--aleticas
--Una persona no puede fallecer antes de nacer
context Person inv fechaNacimientoMenorQueFallecimiento: self.birthYear < self.deathYear

--Un matrimonio no puede acabar antes de empezar
context Marriage inv fechaInicioMenorQueTermino: self.startYear < self.endYear

--Los muertos no pueden estar casados. 
context Person inv siMuertoNoCasado: self.isDead = true
implies ((self.wife -> select (w | w.endYear = oclIsUndefined) -> size() = 0) and 
(self.husband -> select (h | h.endYear = oclIsUndefined) -> size() = 0))

--No puede haber matrimonios futuros (“acordados”): Clock.NOW tiene que ser siempre mayor o igual que
--cualquier fecha de comienzo de un matrimonio
context Community inv matrimonioNoAcordado: (self.person.husband.startYear < self.clock.NOW) and (self.person.wife.startYear < self.clock.NOW)

--No se puede nacer en el futuro: Clock.NOW tiene que ser mayor o igual que cualquier fecha de nacimiento.
context Community inv fechaNacimiento: self.person.birthYear < self.clock.NOW

--No se puede divorciar una persona de alguien con quien no esté actualmente casado.
--esta restricción es igual que la precondicion del método divorce(), por la que no haría falta ponerla

--Una persona empieza viva
context Person :: isDead() : Boolean
init : false

--atributo derivado age, cumple años según pasa el tiempo
context Person :: age : Integer
derive : self.community.clock.NOW - birthYear


--deonticas
--Una persona no puede estar casada consigo misma.
context Person inv noCasadoConsigo: self.husband.husband -> forAll (p : Person | p <> self)
and self.wife.wife -> forAll (p : Person | p <> self)

--No puede haber más que un reloj en toda la aplicación (y por tanto compartido por todas las comunidades)
context Community inv soloUnReloj: self.clock -> size() = 1

--Monogamia: Una persona no puede tener más de un matrimonio activo en un momento dado.
context Person inv monogamia: (self.husband -> select(h | h.endYear = oclIsUndefined()) -> size() < 2) and (self.husband -> select(h | h.endYear = oclIsUndefined()) -> size() < 2)

--No se permite ni la eutanasia ni el suicidio
context Community inv noSuicidioNiEutansia: self.person.deathYear < self.clock.NOW or self.person.deathYear.oclIsUndefined()

--Los niños no pueden estar casados
context Persona inv ninyoNoCasado: self.phase :: child implies (self.wife -> size() = 0 and self.husband -> size() = 0)



--queries
--isMarried():Boolean que devuelve si una persona está actualmente casada o no
context Person :: isMarried(): boolean
body: (self.husband -> size() > 0) or (self.wife -> size() > 0)

--marriages():Integer que devuelve el número de matrimonios que ha tenido una persona a lo largo de su vida
--(incluido el actual, si es que estás casado)
context Person :: marriages(): Integer
body: (self.husband -> size()) + (self.wife -> size()) 

--pre/postconditions

context Marriage :: divorce(hus : Person, wif : Person)
    pre: self.wife -> select (w | w = wif) -> notEmpty() 
    and self.husband -> select (h | h = hus) -> notEmpty() and self.endYear.oclIsUndefined() and hus.consent() = True and wif.consent() = True
    post: self.endYear = self.husband.community.clock.NOW and hus.maritalStatus :: divorced and wif.maritalStatus :: divorced

context Person :: marry() (hus : Person, wif : Person)
    pre : self.wife -> select (w | w = wif) -> isEmpty() 
    and self.husband -> select (h | h = hus) -> isEmpty() and hus.consent() = True and wif.consent() = True
    post : self.startYear = self.husband.community.clock.NOW and hus.maritalStatus :: married and wif.maritalStatus :: married

context Person :: die()
    pre : self.isDead = False and self.deathYear.oclIsUndefined()
    post : self.isDead = True and self.deathYear = self.community.clock.NOW
       
context Person :: age()
    post : self.age = age + 1

context Clock :: tick()
    post : NOW = NOW + 1

context Person :: toYoung()
    pre : self.community.clock.NOW - self.birthYear = self.community.childToYoung and self.phase :: child
    post : self.phase :: young

context Person :: toAdult()
    pre : self.community.clock.NOW - self.birthYear = self.community.youngToAdult and self.phase :: young
    post : self.phase :: adult

context Person :: toElder()
    pre : self.community.clock.NOW - self.birthYear = self.community.adultToElder and self.phase :: adult
    post : self.phase :: elder